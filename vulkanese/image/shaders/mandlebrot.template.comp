#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_gpu_shader_fp64 : enable

DEFINE_STRING// This will be (or has been) replaced by constant definitions
BUFFERS_STRING// This will be (or has been) replaced by buffer definitions
    
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

void main() {

  /*
  In order to fit the work into workgroups, some unnecessary threads are launched.
  We terminate those threads here.
  */
  if(gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
    return;

  double originX = paramsBuffer[0]; 
  double originY = paramsBuffer[1]; 
  double mandleStride = paramsBuffer[2];

  double x = double(originX + float(gl_GlobalInvocationID.x) * mandleStride);
  double y = double(originY + float(gl_GlobalInvocationID.y) * mandleStride);

  /*
  What follows is code for rendering the mandelbrot set.
  */
  dvec2 uv = dvec2(x,y);
  double n = 0.0;
  dvec2 c = dvec2(-.445, 0.0) +  (uv - 0.5)*(2.0+ 1.7*0.2  );
  dvec2 z = dvec2(0.0);
  const int M = 128;
  //const uint M =uint(1/mandleStride);
  for (int i = 0; i<M; i++)
  {
    z = dvec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c;
    if (dot(z, z) > 2) break;
    n++;
  }

  // we use a simple cosine palette to determine color:
  // http://iquilezles.org/www/articles/palettes/palettes.htm
  float t = float(n) / float(M);
  vec3 d = vec3(0.3, 0.3 ,0.5);
  vec3 e = vec3(-0.2, -0.3 ,-0.5);
  vec3 f = vec3(2.1, 2.0, 3.0);
  vec3 g = vec3(0.0, 0.1, 0.0);
  vec4 color = vec4( d + e*cos( 6.28318*(f*t+g) ) ,1.0);

  // Convert the color components to 8-bit unsigned integer values
  uint c_r = uint(color.r * 255.0);
  uint c_g = uint(color.g * 255.0);
  uint c_b = uint(color.b * 255.0);
  uint c_a = uint(color.a * 255.0);


  // Pack the components into a single uint value
  uint pixelValue = (c_a << 24) | (c_r << 16) | (c_g << 8) | c_b;

  // store the rendered mandelbrot set into a storage buffer:
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x] = pixelValue;
}